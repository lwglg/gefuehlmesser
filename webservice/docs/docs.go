// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Guilherme Gonçalves",
            "url": "https://github.com/lwglg"
        },
        "license": {
            "name": "MIT License",
            "url": "https://github.com/lwglg/gefuehlmesser/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/sentiment/feed": {
            "post": {
                "description": "Realiza a análise determinística de sentimento das mensagens de um feed, dada uma payload de feed válida.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API de análise de sentimentos"
                ],
                "summary": "Análise de sentimento de feed",
                "parameters": [
                    {
                        "description": "Payload contendo as mensagens de feed e parâmetro de janela temporal.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sentiment.Feed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sentiment.FeedSentiment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/err.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/err.Errors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/err.Error"
                        }
                    }
                }
            }
        },
        "/api/v1/sentiment/message": {
            "post": {
                "description": "Realiza a análise determinística de sentimento de uma mensagem de feed, dada uma payload de feed válida.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API de análise de sentimentos"
                ],
                "summary": "Análise de sentimento de mensagem",
                "parameters": [
                    {
                        "description": "Payload contendo a estrutura de uma mensagen de feed.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sentiment.FeedMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sentiment.MessageSentiment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/err.Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/err.Errors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/err.Error"
                        }
                    }
                }
            }
        },
        "/utilitary/healthcheck": {
            "get": {
                "description": "Realiza uma requisição de healthcheck ao servidor, retornnando uma mensagem simples.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API utilitária"
                ],
                "summary": "Healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/healthcheck.HealthcheckData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/err.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "err.Error": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "err.Errors": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "healthcheck.HealthcheckData": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "sentiment.Feed": {
            "type": "object",
            "required": [
                "messages"
            ],
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sentiment.FeedMessage"
                    }
                },
                "time_window_minutes": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "sentiment.FeedMessage": {
            "type": "object",
            "required": [
                "content",
                "hashtags",
                "id",
                "timestamp",
                "user_id"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "maxLength": 280
                },
                "hashtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "reactions": {
                    "type": "integer",
                    "minimum": 0
                },
                "sentiment": {
                    "$ref": "#/definitions/sentiment.MessageSentiment"
                },
                "shares": {
                    "type": "integer",
                    "minimum": 0
                },
                "timeWindow": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "views": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "sentiment.FeedSentiment": {
            "type": "object",
            "properties": {
                "anomaly_detected": {
                    "type": "boolean"
                },
                "anomaly_type": {
                    "type": "string"
                },
                "engagement_score": {
                    "type": "number"
                },
                "flags": {
                    "$ref": "#/definitions/sentiment.FeedSentimentFlags"
                },
                "influence_ranking": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sentiment.UserInfluenceRanking"
                    }
                },
                "processing_time_ms": {
                    "type": "number"
                },
                "sentiment_distribution": {
                    "$ref": "#/definitions/sentiment.FeedSentimentDistribution"
                },
                "trending_topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "sentiment.FeedSentimentDistribution": {
            "type": "object",
            "properties": {
                "negative": {
                    "type": "number"
                },
                "neutral": {
                    "type": "number"
                },
                "positive": {
                    "type": "number"
                }
            }
        },
        "sentiment.FeedSentimentFlags": {
            "type": "object",
            "properties": {
                "candidate_awareness": {
                    "type": "boolean"
                },
                "mbras_employee": {
                    "type": "boolean"
                },
                "special_pattern": {
                    "type": "boolean"
                }
            }
        },
        "sentiment.MessageSentiment": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                },
                "processing_time_ms": {
                    "type": "number"
                },
                "score": {
                    "type": "number"
                }
            }
        },
        "sentiment.UserInfluenceRanking": {
            "type": "object",
            "properties": {
                "influence_score": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Gefuehlmesser API",
	Description:      "RESTful API providing sentimnet analysis for feeds' messages",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
